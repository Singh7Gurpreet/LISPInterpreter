#lang racket

(define env (hash '+ + '- - '/ / '* * '= = '<= <= '< < '>= >= '> >))

(define (mainStartEval expr Table)
  (cond
    [(number? expr) expr]
    [(pair? expr)
     (letrec ([op (tableOperator? (car expr) Table)]
              [args (cdr expr)])
       (cond
         ;;(print expr)
         ;; For evaluating nested Lists expressions such as '(((+ x 1)))
         [(number? op) op]

          ;; For simple arithmatic and relational operators
         [(hash-has-key? env op)
           ((hash-ref env op) (mainStartEval (car args) Table) (mainStartEval (car (cdr args)) Table))]

         
         ;; For conditonal if statement
         [(equal? op 'if)
          (if (mainStartEval (car args) Table)
               (mainStartEval (cadr args) Table)
               (mainStartEval (caddr args) Table))]

         ;; For constants for variables we will look up in namespace
         [(equal? op 'quote) (car args)]

         [(equal? op 'car) (car (mainStartEval (cadr expr) Table))]

         [(equal? op 'cdr) (cdr (mainStartEval (cadr expr) Table))]

         [(equal? op 'pair?) (pair? (mainStartEval (cadr expr) Table))]

         [(equal? op 'cons)
               (let ([arg1 (mainStartEval (car args) Table)]
                     [arg2 (mainStartEval (cadr args) Table)])
                     (cons arg1 arg2))]
         
         [(equal? op 'lambda)
                          (print (cddaddr expr))
                          (mainStartEval (caddr expr) (extendingTable Table  (cadr expr) (list (cadddr expr))))
          ]
          ;;(mainStartEval (car (cdr args)) extendingTable Table (car args)))]
               ;; CADR EXPR = ARGS and CADDR EXPR = BODY

        [(equal? op 'let) (mainStartEval (car (cdr args)) (append (car args) Table))]

        [(equal? op 'letrec) (mainStartEval (car (cdr args)) (append (car args) Table))]

        ;; car op == operation
        ;; cadr == formal params
        ;;
        ;; two scenarios caar expr nested lambda
        ;; else simple lambda

        #|
          (mainStartEval (car (cdr (cdr (car (car expr))))) (extendingTable Table (cadaar expr) (cdr expr)) )
|#
        [(list? op) (if (equal? op (car expr)) 
         (if (pair? (caar expr))
          (mainStartEval (append (car (cdr (cdr (car (car expr))))) (cdar expr)) (extendingTable Table (cadaar expr) (cdr expr)) )
          (mainStartEval (caddar expr) (extendingTable Table (cadar expr) (cdr expr)))
          )
         (mainStartEval (append op (list (cadr expr))) Table))
         ]
      

        [else (error "Something wrong")]))]
    [else (tableOperator? expr Table)]))

(define (tableOperator? op Table)
  (cond
    [(null? Table) op] ; If the list is empty, return op
    [(pair? (car Table)) ; If the current element is a pair (like '(x 2))
     (if (equal? (caar Table) op) ; Compare the car of the car with the op
         (mainStartEval (car (cdar Table)) Table) ; Return the value (cdr of car)
         (tableOperator? op (cdr Table)))] ; Recurse to the next element
    [else (tableOperator? op (cdr Table))])) ; Else, continue searching

(define (extendingTable Table formalParams actualParams)
  (if (null? formalParams)
      Table
      (extendingTable 
       (append (list (list (car formalParams) (mainStartEval (car actualParams) Table))) 
               Table)
       (cdr formalParams)
       (cdr actualParams))))


(define (startEval sourceCode) (mainStartEval sourceCode '()))

#|
(startEval '(let ([+ *]) (+ 5 5)))
(startEval '(letrec ([y 1] [x 2]) (+ x y)))
(startEval '(let ([x 5])
(let ([y 10])
    (+ x y)))
)
(startEval '((lambda (x y) (+ x y)) 1 3))
(startEval '(((lambda (x) (lambda (y) (+ x y)))1)2))
|#


(print
(startEval
'(letrec ((fact
(lambda (x)
(if (= x 0) (quote 1)
(* x (fact (- x 1)))))))
(fact 1))))